{
  "version": 3,
  "sources": ["external-global:@serenity-is/corelib/q", "external-global:@serenity-is/corelib", "../../../Modules/ServerTypes/Administration/LanguageColumns.ts", "../../../Modules/ServerTypes/Administration/LanguageRow.ts", "../../../Modules/ServerTypes/Administration/LanguageService.ts", "../../../Modules/ServerTypes/Administration/RoleColumns.ts", "../../../Modules/ServerTypes/Administration/RoleRow.ts", "../../../Modules/ServerTypes/Administration/RoleService.ts", "../../../Modules/ServerTypes/Administration/TenantColumns.ts", "../../../Modules/ServerTypes/Administration/TenantRow.ts", "../../../Modules/ServerTypes/Administration/TenantService.ts", "../../../Modules/ServerTypes/Administration/TranslationService.ts", "../../../Modules/ServerTypes/Administration/UserColumns.ts", "../../../Modules/ServerTypes/Administration/UserRow.ts", "../../../Modules/ServerTypes/Administration/UserService.ts", "../../../Modules/ServerTypes/Administration/LanguageForm.ts", "../../../Modules/ServerTypes/Administration/PermissionKeys.ts", "../../../Modules/ServerTypes/Administration/RoleForm.ts", "../../../Modules/ServerTypes/Administration/RolePermissionRow.ts", "../../../Modules/ServerTypes/Administration/RolePermissionService.ts", "../../../Modules/ServerTypes/Administration/TenantForm.ts", "../../../Modules/ServerTypes/Administration/TwoFactorAuthType.ts", "../../../Modules/ServerTypes/Administration/UserForm.ts", "../../../Modules/ServerTypes/Administration/UserPermissionRow.ts", "../../../Modules/ServerTypes/Administration/UserPermissionService.ts", "../../../Modules/ServerTypes/Administration/UserRoleRow.ts", "../../../Modules/ServerTypes/Administration/UserRoleService.ts"],
  "sourcesContent": ["module.exports = Q;", "module.exports = Serenity;", "\uFEFFexport class LanguageColumns {\n    static columnsKey = 'Administration.Language';\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface LanguageRow {\n    Id?: number;\n    LanguageId?: string;\n    LanguageName?: string;\n}\n\nexport abstract class LanguageRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'LanguageName';\n    static readonly localTextPrefix = 'Administration.Language';\n    static readonly lookupKey = 'Administration.Language';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<LanguageRow>('Administration.Language') }\n    static async getLookupAsync() { return getLookupAsync<LanguageRow>('Administration.Language') }\n\n    static readonly deletePermission = 'Administration:Translation';\n    static readonly insertPermission = 'Administration:Translation';\n    static readonly readPermission = 'Administration:Translation';\n    static readonly updatePermission = 'Administration:Translation';\n\n    static readonly Fields = fieldsProxy<LanguageRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { LanguageRow } from \"./LanguageRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace LanguageService {\n    export const baseUrl = 'Administration/Language';\n\n    export declare function Create(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Administration/Language/Create\",\n        Update = \"Administration/Language/Update\",\n        Delete = \"Administration/Language/Delete\",\n        Retrieve = \"Administration/Language/Retrieve\",\n        List = \"Administration/Language/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>LanguageService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class RoleColumns {\n    static columnsKey = 'Administration.Role';\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface RoleRow {\n    RoleId?: number;\n    RoleName?: string;\n    RoleKey?: string;\n    TenantId?: number;\n}\n\nexport abstract class RoleRow {\n    static readonly idProperty = 'RoleId';\n    static readonly nameProperty = 'RoleName';\n    static readonly localTextPrefix = 'Administration.Role';\n    static readonly lookupKey = 'Administration.Role';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<RoleRow>('Administration.Role') }\n    static async getLookupAsync() { return getLookupAsync<RoleRow>('Administration.Role') }\n\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<RoleRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { RoleRow } from \"./RoleRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace RoleService {\n    export const baseUrl = 'Administration/Role';\n\n    export declare function Create(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Administration/Role/Create\",\n        Update = \"Administration/Role/Update\",\n        Delete = \"Administration/Role/Delete\",\n        Retrieve = \"Administration/Role/Retrieve\",\n        List = \"Administration/Role/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>RoleService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class TenantColumns {\r\n    static columnsKey = 'Administration.Tenant';\r\n}", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface TenantRow {\n    TenantId?: number;\n    TenantName?: string;\n}\n\nexport abstract class TenantRow {\n    static readonly idProperty = 'TenantId';\n    static readonly nameProperty = 'TenantName';\n    static readonly localTextPrefix = 'Administration.Tenant';\n    static readonly lookupKey = 'Administration.Tenant';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<TenantRow>('Administration.Tenant') }\n    static async getLookupAsync() { return getLookupAsync<TenantRow>('Administration.Tenant') }\n\n    static readonly deletePermission = 'Administration:Tenants';\n    static readonly insertPermission = 'Administration:Tenants';\n    static readonly readPermission = 'Administration:Tenants';\n    static readonly updatePermission = 'Administration:Tenants';\n\n    static readonly Fields = fieldsProxy<TenantRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { TenantRow } from \"./TenantRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace TenantService {\n    export const baseUrl = 'Administration/Tenant';\n\n    export declare function Create(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<TenantRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<TenantRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<TenantRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Administration/Tenant/Create\",\n        Update = \"Administration/Tenant/Update\",\n        Delete = \"Administration/Tenant/Delete\",\n        Retrieve = \"Administration/Tenant/Retrieve\",\n        List = \"Administration/Tenant/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>TenantService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { TranslationListRequest } from \"./TranslationListRequest\";\nimport { ListResponse, SaveResponse } from \"@serenity-is/corelib\";\nimport { TranslationItem } from \"./TranslationItem\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { TranslationUpdateRequest } from \"./TranslationUpdateRequest\";\n\nexport namespace TranslationService {\n    export const baseUrl = 'Administration/Translation';\n\n    export declare function List(request: TranslationListRequest, onSuccess?: (response: ListResponse<TranslationItem>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: TranslationUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        List = \"Administration/Translation/List\",\n        Update = \"Administration/Translation/Update\"\n    }\n\n    [\n        'List', \n        'Update'\n    ].forEach(x => {\n        (<any>TranslationService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class UserColumns {\n    static columnsKey = 'Administration.User';\n}\n", "\uFEFFimport { TwoFactorAuthType } from \"./TwoFactorAuthType\";\nimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserRow {\n    UserId?: number;\n    Username?: string;\n    Source?: string;\n    PasswordHash?: string;\n    PasswordSalt?: string;\n    DisplayName?: string;\n    Email?: string;\n    MobilePhoneNumber?: string;\n    MobilePhoneVerified?: boolean;\n    TwoFactorAuth?: TwoFactorAuthType;\n    UserImage?: string;\n    LastDirectoryUpdate?: string;\n    IsActive?: number;\n    Password?: string;\n    PasswordConfirm?: string;\n    ImpersonationToken?: string;\n    Roles?: number[];\n    TenantId?: number;\n    TenantName?: string;\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class UserRow {\n    static readonly idProperty = 'UserId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Username';\n    static readonly localTextPrefix = 'Administration.User';\n    static readonly lookupKey = 'Administration.User';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<UserRow>('Administration.User') }\n    static async getLookupAsync() { return getLookupAsync<UserRow>('Administration.User') }\n\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { UserRow } from \"./UserRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserListRequest } from \"./UserListRequest\";\n\nexport namespace UserService {\n    export const baseUrl = 'Administration/User';\n\n    export declare function Create(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserListRequest, onSuccess?: (response: ListResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Administration/User/Create\",\n        Update = \"Administration/User/Update\",\n        Delete = \"Administration/User/Delete\",\n        Retrieve = \"Administration/User/Retrieve\",\n        List = \"Administration/User/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>UserService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface LanguageForm {\n    LanguageId: StringEditor;\n    LanguageName: StringEditor;\n}\n\nexport class LanguageForm extends PrefixedContext {\n    static formKey = 'Administration.Language';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!LanguageForm.init)  {\n            LanguageForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(LanguageForm, [\n                'LanguageId', w0,\n                'LanguageName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFexport namespace PermissionKeys {\n    export const Security = \"Administration:Security\";\n    export const Translation = \"Administration:Translation\";\n    export const Tenants = \"Administration:Tenants\";\n}\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface RoleForm {\n    RoleName: StringEditor;\n    RoleKey: StringEditor;\n}\n\nexport class RoleForm extends PrefixedContext {\n    static formKey = 'Administration.Role';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!RoleForm.init)  {\n            RoleForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(RoleForm, [\n                'RoleName', w0,\n                'RoleKey', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface RolePermissionRow {\n    RolePermissionId?: number;\n    RoleId?: number;\n    PermissionKey?: string;\n    RoleRoleName?: string;\n}\n\nexport abstract class RolePermissionRow {\n    static readonly idProperty = 'RolePermissionId';\n    static readonly nameProperty = 'PermissionKey';\n    static readonly localTextPrefix = 'Administration.RolePermission';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<RolePermissionRow>();\n}\n", "\uFEFFimport { RolePermissionUpdateRequest } from \"./RolePermissionUpdateRequest\";\nimport { SaveResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { RolePermissionListRequest } from \"./RolePermissionListRequest\";\nimport { RolePermissionListResponse } from \"./RolePermissionListResponse\";\n\nexport namespace RolePermissionService {\n    export const baseUrl = 'Administration/RolePermission';\n\n    export declare function Update(request: RolePermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: RolePermissionListRequest, onSuccess?: (response: RolePermissionListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Update = \"Administration/RolePermission/Update\",\n        List = \"Administration/RolePermission/List\"\n    }\n\n    [\n        'Update', \n        'List'\n    ].forEach(x => {\n        (<any>RolePermissionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface TenantForm {\n    TenantName: StringEditor;\n}\n\nexport class TenantForm extends PrefixedContext {\n    static formKey = 'Administration.Tenant';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!TenantForm.init)  {\n            TenantForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(TenantForm, [\n                'TenantName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TwoFactorAuthType {\n    Email = 1,\n    SMS = 2\n}\nDecorators.registerEnumType(TwoFactorAuthType, 'Rio.Administration.TwoFactorAuthType');\n", "\uFEFFimport { StringEditor, EmailAddressEditor, LookupEditor, BooleanEditor, EnumEditor, ImageUploadEditor, PasswordEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface UserForm {\n    Username: StringEditor;\n    DisplayName: StringEditor;\n    Email: EmailAddressEditor;\n    Roles: LookupEditor;\n    MobilePhoneNumber: StringEditor;\n    MobilePhoneVerified: BooleanEditor;\n    TwoFactorAuth: EnumEditor;\n    UserImage: ImageUploadEditor;\n    Password: PasswordEditor;\n    PasswordConfirm: PasswordEditor;\n    Source: StringEditor;\n    TenantId: LookupEditor;\n}\n\nexport class UserForm extends PrefixedContext {\n    static formKey = 'Administration.User';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!UserForm.init)  {\n            UserForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = EmailAddressEditor;\n            var w2 = LookupEditor;\n            var w3 = BooleanEditor;\n            var w4 = EnumEditor;\n            var w5 = ImageUploadEditor;\n            var w6 = PasswordEditor;\n\n            initFormType(UserForm, [\n                'Username', w0,\n                'DisplayName', w0,\n                'Email', w1,\n                'Roles', w2,\n                'MobilePhoneNumber', w0,\n                'MobilePhoneVerified', w3,\n                'TwoFactorAuth', w4,\n                'UserImage', w5,\n                'Password', w6,\n                'PasswordConfirm', w6,\n                'Source', w0,\n                'TenantId', w2\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserPermissionRow {\n    UserPermissionId?: number;\n    UserId?: number;\n    PermissionKey?: string;\n    Granted?: boolean;\n    Username?: string;\n    User?: string;\n}\n\nexport abstract class UserPermissionRow {\n    static readonly idProperty = 'UserPermissionId';\n    static readonly nameProperty = 'PermissionKey';\n    static readonly localTextPrefix = 'Administration.UserPermission';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserPermissionRow>();\n}\n", "\uFEFFimport { UserPermissionUpdateRequest } from \"./UserPermissionUpdateRequest\";\nimport { SaveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserPermissionListRequest } from \"./UserPermissionListRequest\";\nimport { UserPermissionRow } from \"./UserPermissionRow\";\n\nexport namespace UserPermissionService {\n    export const baseUrl = 'Administration/UserPermission';\n\n    export declare function Update(request: UserPermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<UserPermissionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListRolePermissions(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListPermissionKeys(request: ServiceRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Update = \"Administration/UserPermission/Update\",\n        List = \"Administration/UserPermission/List\",\n        ListRolePermissions = \"Administration/UserPermission/ListRolePermissions\",\n        ListPermissionKeys = \"Administration/UserPermission/ListPermissionKeys\"\n    }\n\n    [\n        'Update', \n        'List', \n        'ListRolePermissions', \n        'ListPermissionKeys'\n    ].forEach(x => {\n        (<any>UserPermissionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserRoleRow {\n    UserRoleId?: number;\n    UserId?: number;\n    RoleId?: number;\n    Username?: string;\n    User?: string;\n}\n\nexport abstract class UserRoleRow {\n    static readonly idProperty = 'UserRoleId';\n    static readonly localTextPrefix = 'Administration.UserRole';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserRoleRow>();\n}\n", "\uFEFFimport { UserRoleUpdateRequest } from \"./UserRoleUpdateRequest\";\nimport { SaveResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserRoleListRequest } from \"./UserRoleListRequest\";\nimport { UserRoleListResponse } from \"./UserRoleListResponse\";\n\nexport namespace UserRoleService {\n    export const baseUrl = 'Administration/UserRole';\n\n    export declare function Update(request: UserRoleUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserRoleListRequest, onSuccess?: (response: UserRoleListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Update = \"Administration/UserRole/Update\",\n        List = \"Administration/UserRole/List\"\n    }\n\n    [\n        'Update', \n        'List'\n    ].forEach(x => {\n        (<any>UserRoleService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n"],
  "mappings": "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",
  "names": ["require_q", "__commonJSMin", "exports", "module", "require_corelib", "__commonJSMin", "exports", "module", "LanguageColumns", "import_q", "LanguageRow", "__async", "import_q", "LanguageService", "x", "r", "s", "o", "RoleColumns", "import_q", "RoleRow", "__async", "import_q", "RoleService", "x", "r", "s", "o", "TenantColumns", "import_q", "TenantRow", "__async", "import_q", "TenantService", "x", "r", "s", "o", "import_q", "TranslationService", "x", "r", "s", "o", "UserColumns", "import_q", "UserRow", "__async", "import_q", "UserService", "x", "r", "s", "o", "import_corelib", "import_q", "_LanguageForm", "prefix", "w0", "LanguageForm", "PermissionKeys", "import_corelib", "import_q", "_RoleForm", "prefix", "w0", "RoleForm", "import_q", "RolePermissionRow", "import_q", "RolePermissionService", "x", "r", "s", "o", "import_corelib", "import_q", "_TenantForm", "prefix", "w0", "TenantForm", "import_corelib", "TwoFactorAuthType", "import_corelib", "import_q", "_UserForm", "prefix", "w0", "w1", "w2", "w3", "w4", "w5", "w6", "UserForm", "import_q", "UserPermissionRow", "import_q", "UserPermissionService", "x", "r", "s", "o", "import_q", "UserRoleRow", "import_q", "UserRoleService", "x", "r", "s", "o"]
}
