{
  "version": 3,
  "sources": ["../../../Modules/Administration/UserPermission/PermissionCheckEditor.ts"],
  "sourcesContent": ["\uFEFFimport { DataGrid, Decorators, GridUtils, IGetEditValue, ISetEditValue, SlickFormatting, SlickTreeHelper, ToolButton } from \"@serenity-is/corelib\";\r\nimport { count, Dictionary, Grouping, toGrouping, text, turkishLocaleCompare, htmlEncode, any, trimToNull, getRemoteData, tryGetText } from \"@serenity-is/corelib/q\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { UserPermissionRow } from \"../\";\r\n\r\n@Decorators.registerEditor('Rio.Administration.PermissionCheckEditor', [IGetEditValue, ISetEditValue])\r\nexport class PermissionCheckEditor extends DataGrid<PermissionCheckItem, PermissionCheckEditorOptions> {\r\n\r\n    protected getIdProperty() { return \"Key\"; }\r\n\r\n    private searchText: string;\r\n    private byParentKey: Grouping<PermissionCheckItem>;\r\n\r\n    constructor(container: JQuery, opt: PermissionCheckEditorOptions) {\r\n        super(container, opt);\r\n\r\n        let titleByKey: Dictionary<string> = {};\r\n        let permissionKeys = this.getSortedGroupAndPermissionKeys(titleByKey);\r\n        let items = permissionKeys.map(key => <PermissionCheckItem>{\r\n            Key: key,\r\n            ParentKey: this.getParentKey(key),\r\n            Title: titleByKey[key],\r\n            GrantRevoke: null,\r\n            IsGroup: key.charAt(key.length - 1) === ':'\r\n        });\r\n\r\n        this.byParentKey = toGrouping(items, x => x.ParentKey);\r\n        this.setItems(items);\r\n    }\r\n\r\n    private getItemGrantRevokeClass(item: PermissionCheckItem, grant: boolean): string {\r\n        if (!item.IsGroup) {\r\n            return ((item.GrantRevoke === grant) ? ' checked' : '');\r\n        }\r\n\r\n        let desc = this.getDescendants(item, true);\r\n        let granted = desc.filter(x => x.GrantRevoke === grant);\r\n\r\n        if (!granted.length) {\r\n            return '';\r\n        }\r\n\r\n        if (desc.length === granted.length) {\r\n            return 'checked';\r\n        }\r\n\r\n        return 'checked partial';\r\n    }\r\n\r\n    private roleOrImplicit(key): boolean {\r\n        if (this._rolePermissions[key])\r\n            return true;\r\n\r\n        for (var k of Object.keys(this._rolePermissions)) {\r\n            var d = this._implicitPermissions[k];\r\n            if (d && d[key])\r\n                return true;\r\n        }\r\n\r\n        for (var i of Object.keys(this._implicitPermissions)) {\r\n            var item = this.view.getItemById(i);\r\n            if (item && item.GrantRevoke == true) {\r\n                var d = this._implicitPermissions[i];\r\n                if (d && d[key])\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getItemEffectiveClass(item: PermissionCheckItem): string {\r\n\r\n        if (item.IsGroup) {\r\n            let desc = this.getDescendants(item, true);\r\n            let grantCount = count(desc, x => x.GrantRevoke === true ||\r\n                (x.GrantRevoke == null && this.roleOrImplicit(x.Key)));\r\n\r\n            if (grantCount === desc.length || desc.length === 0) {\r\n                return 'allow';\r\n            }\r\n\r\n            if (grantCount === 0) {\r\n                return 'deny';\r\n            }\r\n\r\n            return 'partial';\r\n        }\r\n\r\n        let granted = item.GrantRevoke === true ||\r\n            (item.GrantRevoke == null && this.roleOrImplicit(item.Key));\r\n\r\n        return (granted ? ' allow' : ' deny');\r\n    }\r\n\r\n    protected getColumns(): Column[] {\r\n        let columns: Column[] = [{\r\n            name: text('Site.UserPermissionDialog.Permission'),\r\n            field: 'Title',\r\n            format: SlickFormatting.treeToggle(() => this.view, x => x.Key, ctx => {\r\n                let item = ctx.item;\r\n                let klass = this.getItemEffectiveClass(item);\r\n                return '<span class=\"effective-permission ' + klass + '\">' + htmlEncode(ctx.value) + '</span>';\r\n            }),\r\n            width: 495,\r\n            sortable: false\r\n        }, {\r\n            name: text('Site.UserPermissionDialog.Grant'), field: 'Grant',\r\n            format: ctx => {\r\n                let item1 = ctx.item;\r\n                let klass1 = this.getItemGrantRevokeClass(item1, true);\r\n                return \"<span class='check-box grant no-float \" + klass1 + \"'></span>\";\r\n            },\r\n            width: 65,\r\n            sortable: false,\r\n            headerCssClass: 'align-center',\r\n            cssClass: 'align-center'\r\n        }];\r\n\r\n        if (this.options.showRevoke) {\r\n            columns.push({\r\n                name: text('Site.UserPermissionDialog.Revoke'), field: 'Revoke',\r\n                format: ctx => {\r\n                    let item2 = ctx.item;\r\n                    let klass2 = this.getItemGrantRevokeClass(item2, false);\r\n                    return '<span class=\"check-box revoke no-float ' + klass2 + '\"></span>';\r\n                },\r\n                width: 65,\r\n                sortable: false,\r\n                headerCssClass: 'align-center',\r\n                cssClass: 'align-center'\r\n            });\r\n        }\r\n\r\n        return columns;\r\n    }\r\n\r\n    public setItems(items: PermissionCheckItem[]): void {\r\n        SlickTreeHelper.setIndents(items, x => x.Key, x => x.ParentKey, false);\r\n        this.view.setItems(items, true);\r\n    }\r\n\r\n    protected onViewSubmit() {\r\n        return false;\r\n    }\r\n\r\n    protected onViewFilter(item: PermissionCheckItem): boolean {\r\n        if (!super.onViewFilter(item)) {\r\n            return false;\r\n        }\r\n\r\n        if (!SlickTreeHelper.filterById(item, this.view, x => x.ParentKey))\r\n            return false;\r\n\r\n        if (this.searchText) {\r\n            return this.matchContains(item) || item.IsGroup && any(this.getDescendants(item, false), x => this.matchContains(x));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private matchContains(item: PermissionCheckItem): boolean {\r\n        return Select2.util.stripDiacritics(item.Title || '').toLowerCase().indexOf(this.searchText) >= 0;\r\n    }\r\n\r\n    private getDescendants(item: PermissionCheckItem, excludeGroups: boolean): PermissionCheckItem[] {\r\n        let result: PermissionCheckItem[] = [];\r\n        let stack = [item];\r\n        while (stack.length > 0) {\r\n            let i = stack.pop();\r\n            let children = this.byParentKey[i.Key];\r\n            if (!children)\r\n                continue;\r\n\r\n            for (let child of children) {\r\n                if (!excludeGroups || !child.IsGroup) {\r\n                    result.push(child);\r\n                }\r\n\r\n                stack.push(child);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected onClick(e, row, cell): void {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (!e.isDefaultPrevented()) {\r\n            SlickTreeHelper.toggleClick(e, row, cell, this.view, x => x.Key);\r\n        }\r\n\r\n        if (e.isDefaultPrevented()) {\r\n            return;\r\n        }\r\n\r\n        let target = $(e.target);\r\n        let grant = target.hasClass('grant');\r\n\r\n        if (grant || target.hasClass('revoke')) {\r\n            e.preventDefault();\r\n\r\n            let item = this.itemAt(row);\r\n            let checkedOrPartial = target.hasClass('checked') || target.hasClass('partial');\r\n\r\n            if (checkedOrPartial) {\r\n                grant = null;\r\n            }\r\n            else {\r\n                grant = grant !== checkedOrPartial;\r\n            }\r\n\r\n            if (item.IsGroup) {\r\n                for (var d of this.getDescendants(item, true)) {\r\n                    d.GrantRevoke = grant;\r\n                }\r\n            }\r\n            else\r\n                item.GrantRevoke = grant;\r\n\r\n            this.slickGrid.invalidate();\r\n        }\r\n    }\r\n\r\n    private getParentKey(key): string {\r\n        if (key.charAt(key.length - 1) === ':') {\r\n            key = key.substr(0, key.length - 1);\r\n        }\r\n\r\n        let idx = key.lastIndexOf(':');\r\n        if (idx >= 0) {\r\n            return key.substr(0, idx + 1);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected getButtons(): ToolButton[] {\r\n        return [];\r\n    }\r\n\r\n    protected createToolbarExtensions(): void {\r\n        super.createToolbarExtensions();\r\n        GridUtils.addQuickSearchInputCustom(this.toolbar.element, (_, text) => {\r\n            this.searchText = Select2.util.stripDiacritics(trimToNull(text) || '').toLowerCase();\r\n            this.view.setItems(this.view.getItems(), true);\r\n        });\r\n    }\r\n\r\n    private getSortedGroupAndPermissionKeys(titleByKey: Dictionary<string>): string[] {\r\n        let keys = <string[]>getRemoteData('Administration.PermissionKeys');\r\n        let titleWithGroup = {};\r\n        for (var k of keys) {\r\n            let s = k;\r\n\r\n            if (!s) {\r\n                continue;\r\n            }\r\n\r\n            if (s.charAt(s.length - 1) == ':') {\r\n                s = s.substr(0, s.length - 1);\r\n                if (s.length === 0) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (titleByKey[s]) {\r\n                continue;\r\n            }\r\n\r\n            titleByKey[s] = tryGetText('Permission.' + s) ?? s;\r\n            let parts = s.split(':');\r\n            let group = '';\r\n            let groupTitle = '';\r\n            for (let i = 0; i < parts.length - 1; i++) {\r\n                group = group + parts[i] + ':';\r\n                let txt = tryGetText('Permission.' + group);\r\n                if (txt == null) {\r\n                    txt = parts[i];\r\n                }\r\n                titleByKey[group] = txt;\r\n                groupTitle = groupTitle + titleByKey[group] + ':';\r\n                titleWithGroup[group] = groupTitle;\r\n            }\r\n\r\n            titleWithGroup[s] = groupTitle + titleByKey[s];\r\n        }\r\n\r\n        keys = Object.keys(titleByKey);\r\n        keys = keys.sort((x, y) => turkishLocaleCompare(titleWithGroup[x], titleWithGroup[y]));\r\n\r\n        return keys;\r\n    }\r\n\r\n    get value(): UserPermissionRow[] {\r\n\r\n        let result: UserPermissionRow[] = [];\r\n\r\n        for (let item of this.view.getItems()) {\r\n            if (item.GrantRevoke != null && item.Key.charAt(item.Key.length - 1) != ':') {\r\n                result.push({ PermissionKey: item.Key, Granted: item.GrantRevoke });\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    set value(value: UserPermissionRow[]) {\r\n\r\n        for (let item of this.view.getItems()) {\r\n            item.GrantRevoke = null;\r\n        }\r\n\r\n        if (value != null) {\r\n            for (let row of value) {\r\n                let r = this.view.getItemById(row.PermissionKey);\r\n                if (r) {\r\n                    r.GrantRevoke = row.Granted ?? true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setItems(this.getItems());\r\n    }\r\n\r\n    private _rolePermissions: Dictionary<boolean> = {};\r\n\r\n    get rolePermissions(): string[] {\r\n        return Object.keys(this._rolePermissions);\r\n    }\r\n\r\n    set rolePermissions(value: string[]) {\r\n        this._rolePermissions = {};\r\n\r\n        if (value) {\r\n            for (let k of value) {\r\n                this._rolePermissions[k] = true;\r\n            }\r\n        }\r\n\r\n        this.setItems(this.getItems());\r\n    }\r\n\r\n    private _implicitPermissions: Dictionary<Dictionary<boolean>> = {};\r\n\r\n    set implicitPermissions(value: Dictionary<string[]>) {\r\n        this._implicitPermissions = {};\r\n\r\n        if (value) {\r\n            for (var k of Object.keys(value)) {\r\n                this._implicitPermissions[k] = this._implicitPermissions[k] || {};\r\n                var l = value[k];\r\n                if (l) {\r\n                    for (var s of l)\r\n                        this._implicitPermissions[k][s] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface PermissionCheckEditorOptions {\r\n    showRevoke?: boolean;\r\n}\r\n\r\nexport interface PermissionCheckItem {\r\n    ParentKey?: string;\r\n    Key?: string;\r\n    Title?: string;\r\n    IsGroup?: boolean;\r\n    GrantRevoke?: boolean;\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_corelib", "import_q", "PermissionCheckEditor", "container", "opt", "titleByKey", "items", "key", "x", "item", "grant", "desc", "granted", "k", "d", "i", "grantCount", "columns", "ctx", "klass", "item1", "klass1", "item2", "klass2", "excludeGroups", "result", "stack", "children", "child", "row", "cell", "target", "checkedOrPartial", "idx", "_", "text", "_a", "keys", "titleWithGroup", "s", "parts", "group", "groupTitle", "txt", "y", "value", "r", "l", "__decorateClass"]
}
