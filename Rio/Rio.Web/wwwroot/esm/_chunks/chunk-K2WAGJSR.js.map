{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Workspace/ExamColumns.ts", "../../../Modules/ServerTypes/Workspace/ExamRow.ts", "../../../Modules/ServerTypes/Workspace/ExamService.ts", "../../../Modules/ServerTypes/Workspace/GroupColumns.ts", "../../../Modules/ServerTypes/Workspace/GroupRow.ts", "../../../Modules/ServerTypes/Workspace/GroupService.ts", "../../../Modules/ServerTypes/Workspace/SheetTypeColumns.ts", "../../../Modules/ServerTypes/Workspace/SheetTypeRow.ts", "../../../Modules/ServerTypes/Workspace/SheetTypeService.ts", "../../../Modules/ServerTypes/Workspace/ExamForm.ts", "../../../Modules/ServerTypes/Workspace/GroupForm.ts", "../../../Modules/ServerTypes/Workspace/SheetTypeForm.ts"],
  "sourcesContent": ["\uFEFFexport class ExamColumns {\r\n    static columnsKey = 'Workspace.Exam';\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface ExamRow {\n    Id?: number;\n    Code?: string;\n    Name?: string;\n    Description?: string;\n    TotalMarks?: number;\n    NegativeMarks?: number;\n    OptionsAvailable?: number;\n    ResultCriteria?: string;\n    InsertDate?: string;\n    InsertUserId?: number;\n    UpdateDate?: string;\n    UpdateUserId?: number;\n    IsActive?: number;\n    TenantId?: number;\n}\n\nexport abstract class ExamRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Code';\n    static readonly localTextPrefix = 'Workspace.Exam';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<ExamRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { ExamRow } from \"./ExamRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace ExamService {\n    export const baseUrl = 'Workspace/Exam';\n\n    export declare function Create(request: SaveRequest<ExamRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<ExamRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<ExamRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<ExamRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Workspace/Exam/Create\",\n        Update = \"Workspace/Exam/Update\",\n        Delete = \"Workspace/Exam/Delete\",\n        Retrieve = \"Workspace/Exam/Retrieve\",\n        List = \"Workspace/Exam/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>ExamService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class GroupColumns {\r\n    static columnsKey = 'Workspace.Group';\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface GroupRow {\n    Id?: number;\n    Name?: string;\n    Description?: string;\n    ParentId?: number;\n    InsertDate?: string;\n    InsertUserId?: number;\n    UpdateDate?: string;\n    UpdateUserId?: number;\n    IsActive?: number;\n    TenantId?: number;\n    ParentName?: string;\n    ParentDescription?: string;\n    ParentParentId?: number;\n    ParentInsertDate?: string;\n    ParentInsertUserId?: number;\n    ParentUpdateDate?: string;\n    ParentUpdateUserId?: number;\n    ParentIsActive?: number;\n    ParentTenantId?: number;\n}\n\nexport abstract class GroupRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'Workspace.Group';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<GroupRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { GroupRow } from \"./GroupRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace GroupService {\n    export const baseUrl = 'Workspace/Group';\n\n    export declare function Create(request: SaveRequest<GroupRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<GroupRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<GroupRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<GroupRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Workspace/Group/Create\",\n        Update = \"Workspace/Group/Update\",\n        Delete = \"Workspace/Group/Delete\",\n        Retrieve = \"Workspace/Group/Retrieve\",\n        List = \"Workspace/Group/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>GroupService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class SheetTypeColumns {\r\n    static columnsKey = 'Workspace.SheetType';\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SheetTypeRow {\n    Id?: number;\n    Name?: string;\n    Description?: string;\n    TotalQuestions?: number;\n    EPaperSize?: number;\n    HeightInPixel?: number;\n    WidthInPixel?: number;\n    SheetData?: string;\n    SheetImage?: string;\n    OverlayImage?: string;\n    Synced?: boolean;\n    IsPrivate?: boolean;\n    PdfTemplate?: string;\n    SheetNumber?: number;\n    InsertDate?: string;\n    InsertUserId?: number;\n    UpdateDate?: string;\n    UpdateUserId?: number;\n    IsActive?: number;\n}\n\nexport abstract class SheetTypeRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'Workspace.SheetType';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<SheetTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SheetTypeRow } from \"./SheetTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SheetTypeService {\n    export const baseUrl = 'Workspace/SheetType';\n\n    export declare function Create(request: SaveRequest<SheetTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SheetTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SheetTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SheetTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Workspace/SheetType/Create\",\n        Update = \"Workspace/SheetType/Update\",\n        Delete = \"Workspace/SheetType/Delete\",\n        Retrieve = \"Workspace/SheetType/Retrieve\",\n        List = \"Workspace/SheetType/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SheetTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { StringEditor, IntegerEditor, DecimalEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface ExamForm {\n    Code: StringEditor;\n    Name: StringEditor;\n    Description: StringEditor;\n    TotalMarks: IntegerEditor;\n    NegativeMarks: DecimalEditor;\n    OptionsAvailable: IntegerEditor;\n    ResultCriteria: StringEditor;\n    InsertDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateDate: DateEditor;\n    UpdateUserId: IntegerEditor;\n    IsActive: IntegerEditor;\n    TenantId: IntegerEditor;\n}\n\nexport class ExamForm extends PrefixedContext {\n    static formKey = 'Workspace.Exam';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ExamForm.init)  {\n            ExamForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = DecimalEditor;\n            var w3 = DateEditor;\n\n            initFormType(ExamForm, [\n                'Code', w0,\n                'Name', w0,\n                'Description', w0,\n                'TotalMarks', w1,\n                'NegativeMarks', w2,\n                'OptionsAvailable', w1,\n                'ResultCriteria', w0,\n                'InsertDate', w3,\n                'InsertUserId', w1,\n                'UpdateDate', w3,\n                'UpdateUserId', w1,\n                'IsActive', w1,\n                'TenantId', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { StringEditor, IntegerEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface GroupForm {\n    Name: StringEditor;\n    Description: StringEditor;\n    ParentId: IntegerEditor;\n    InsertDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateDate: DateEditor;\n    UpdateUserId: IntegerEditor;\n    IsActive: IntegerEditor;\n    TenantId: IntegerEditor;\n}\n\nexport class GroupForm extends PrefixedContext {\n    static formKey = 'Workspace.Group';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!GroupForm.init)  {\n            GroupForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = DateEditor;\n\n            initFormType(GroupForm, [\n                'Name', w0,\n                'Description', w0,\n                'ParentId', w1,\n                'InsertDate', w2,\n                'InsertUserId', w1,\n                'UpdateDate', w2,\n                'UpdateUserId', w1,\n                'IsActive', w1,\n                'TenantId', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { StringEditor, IntegerEditor, BooleanEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface SheetTypeForm {\n    Name: StringEditor;\n    Description: StringEditor;\n    TotalQuestions: IntegerEditor;\n    EPaperSize: IntegerEditor;\n    HeightInPixel: IntegerEditor;\n    WidthInPixel: IntegerEditor;\n    SheetData: StringEditor;\n    SheetImage: StringEditor;\n    OverlayImage: StringEditor;\n    Synced: BooleanEditor;\n    IsPrivate: BooleanEditor;\n    PdfTemplate: StringEditor;\n    SheetNumber: StringEditor;\n    InsertDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateDate: DateEditor;\n    UpdateUserId: IntegerEditor;\n    IsActive: IntegerEditor;\n}\n\nexport class SheetTypeForm extends PrefixedContext {\n    static formKey = 'Workspace.SheetType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SheetTypeForm.init)  {\n            SheetTypeForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = BooleanEditor;\n            var w3 = DateEditor;\n\n            initFormType(SheetTypeForm, [\n                'Name', w0,\n                'Description', w0,\n                'TotalQuestions', w1,\n                'EPaperSize', w1,\n                'HeightInPixel', w1,\n                'WidthInPixel', w1,\n                'SheetData', w0,\n                'SheetImage', w0,\n                'OverlayImage', w0,\n                'Synced', w2,\n                'IsPrivate', w2,\n                'PdfTemplate', w0,\n                'SheetNumber', w0,\n                'InsertDate', w3,\n                'InsertUserId', w1,\n                'UpdateDate', w3,\n                'UpdateUserId', w1,\n                'IsActive', w1\n            ]);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["ExamColumns", "import_q", "ExamRow", "import_q", "ExamService", "x", "r", "o", "GroupColumns", "import_q", "GroupRow", "import_q", "GroupService", "x", "r", "o", "SheetTypeColumns", "import_q", "SheetTypeRow", "import_q", "SheetTypeService", "x", "r", "o", "import_corelib", "import_q", "_ExamForm", "prefix", "w0", "w1", "w2", "w3", "ExamForm", "import_corelib", "import_q", "_GroupForm", "prefix", "w0", "w1", "w2", "GroupForm", "import_corelib", "import_q", "_SheetTypeForm", "prefix", "w0", "w1", "w2", "w3", "SheetTypeForm"]
}
