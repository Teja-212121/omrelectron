{
  "version": 3,
  "sources": ["../../../../../Modules/Workspace/SheetType/SheetTypePage.ts", "../../../../../Modules/Workspace/SheetType/SheetTypeGrid.ts", "../../../../../Modules/ServerTypes/Workspace/SheetTypeColumns.ts", "../../../../../Modules/ServerTypes/Workspace/SheetTypeForm.ts", "../../../../../Modules/ServerTypes/Workspace/SheetTypeRow.ts", "../../../../../Modules/ServerTypes/Workspace/SheetTypeService.ts", "../../../../../Modules/Workspace/SheetType/SheetTypeDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { SheetTypeGrid } from './SheetTypeGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new SheetTypeGrid($('#GridDiv')).element);\r\n});", "\uFEFFimport { Decorators, EntityGrid } from '@serenity-is/corelib';\r\nimport { SheetTypeColumns, SheetTypeRow, SheetTypeService } from '../../ServerTypes/Workspace';\r\nimport { SheetTypeDialog } from './SheetTypeDialog';\r\n\r\n@Decorators.registerClass()\r\nexport class SheetTypeGrid extends EntityGrid<SheetTypeRow, any> {\r\n    protected getColumnsKey() { return SheetTypeColumns.columnsKey; }\r\n    protected getDialogType() { return SheetTypeDialog; }\r\n    protected getIdProperty() { return SheetTypeRow.idProperty; }\r\n    protected getInsertPermission() { return SheetTypeRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return SheetTypeRow.localTextPrefix; }\r\n    protected getService() { return SheetTypeService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n}", "\uFEFFexport class SheetTypeColumns {\r\n    static columnsKey = 'Workspace.SheetType';\r\n}", "\uFEFFimport { StringEditor, IntegerEditor, BooleanEditor, DateEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface SheetTypeForm {\n    Name: StringEditor;\n    Description: StringEditor;\n    TotalQuestions: IntegerEditor;\n    EPaperSize: IntegerEditor;\n    HeightInPixel: IntegerEditor;\n    WidthInPixel: IntegerEditor;\n    SheetData: StringEditor;\n    SheetImage: StringEditor;\n    OverlayImage: StringEditor;\n    Synced: BooleanEditor;\n    IsPrivate: BooleanEditor;\n    PdfTemplate: StringEditor;\n    SheetNumber: StringEditor;\n    InsertDate: DateEditor;\n    InsertUserId: IntegerEditor;\n    UpdateDate: DateEditor;\n    UpdateUserId: IntegerEditor;\n    IsActive: IntegerEditor;\n}\n\nexport class SheetTypeForm extends PrefixedContext {\n    static formKey = 'Workspace.SheetType';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!SheetTypeForm.init)  {\n            SheetTypeForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = IntegerEditor;\n            var w2 = BooleanEditor;\n            var w3 = DateEditor;\n\n            initFormType(SheetTypeForm, [\n                'Name', w0,\n                'Description', w0,\n                'TotalQuestions', w1,\n                'EPaperSize', w1,\n                'HeightInPixel', w1,\n                'WidthInPixel', w1,\n                'SheetData', w0,\n                'SheetImage', w0,\n                'OverlayImage', w0,\n                'Synced', w2,\n                'IsPrivate', w2,\n                'PdfTemplate', w0,\n                'SheetNumber', w0,\n                'InsertDate', w3,\n                'InsertUserId', w1,\n                'UpdateDate', w3,\n                'UpdateUserId', w1,\n                'IsActive', w1\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface SheetTypeRow {\n    Id?: number;\n    Name?: string;\n    Description?: string;\n    TotalQuestions?: number;\n    EPaperSize?: number;\n    HeightInPixel?: number;\n    WidthInPixel?: number;\n    SheetData?: string;\n    SheetImage?: string;\n    OverlayImage?: string;\n    Synced?: boolean;\n    IsPrivate?: boolean;\n    PdfTemplate?: string;\n    SheetNumber?: number;\n    InsertDate?: string;\n    InsertUserId?: number;\n    UpdateDate?: string;\n    UpdateUserId?: number;\n    IsActive?: number;\n}\n\nexport abstract class SheetTypeRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'Name';\n    static readonly localTextPrefix = 'Workspace.SheetType';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<SheetTypeRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { SheetTypeRow } from \"./SheetTypeRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace SheetTypeService {\n    export const baseUrl = 'Workspace/SheetType';\n\n    export declare function Create(request: SaveRequest<SheetTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<SheetTypeRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<SheetTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<SheetTypeRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export declare const enum Methods {\n        Create = \"Workspace/SheetType/Create\",\n        Update = \"Workspace/SheetType/Update\",\n        Delete = \"Workspace/SheetType/Delete\",\n        Retrieve = \"Workspace/SheetType/Retrieve\",\n        List = \"Workspace/SheetType/List\"\n    }\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>SheetTypeService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { SheetTypeForm, SheetTypeRow, SheetTypeService } from '../../ServerTypes/Workspace';\r\n\r\n@Decorators.registerClass()\r\nexport class SheetTypeDialog extends EntityDialog<SheetTypeRow, any> {\r\n    protected getFormKey() { return SheetTypeForm.formKey; }\r\n    protected getIdProperty() { return SheetTypeRow.idProperty; }\r\n    protected getLocalTextPrefix() { return SheetTypeRow.localTextPrefix; }\r\n    protected getNameProperty() { return SheetTypeRow.nameProperty; }\r\n    protected getService() { return SheetTypeService.baseUrl; }\r\n    protected getDeletePermission() { return SheetTypeRow.deletePermission; }\r\n    protected getInsertPermission() { return SheetTypeRow.insertPermission; }\r\n    protected getUpdatePermission() { return SheetTypeRow.updatePermission; }\r\n\r\n    protected form = new SheetTypeForm(this.idPrefix);\r\n\r\n}"],
  "mappings": "4EAAC,IAAAA,EAAuC,SCAvC,IAAAC,EAAuC,SCAhC,IAAMC,EAAN,KAAuB,CAE/B,EAFcA,EACH,WAAa,sBCDvB,IAAAC,EAAwF,SACzFC,EAA6B,SAuBhBC,EAAN,cAA4B,iBAAgB,CAI/C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAc,KAAO,CACtBA,EAAc,KAAO,GAErB,IAAIE,EAAK,eACLC,EAAK,gBACLC,EAAK,gBACLC,EAAK,gBAET,gBAAaL,EAAe,CACxB,OAAQE,EACR,cAAeA,EACf,iBAAkBC,EAClB,aAAcA,EACd,gBAAiBA,EACjB,eAAgBA,EAChB,YAAaD,EACb,aAAcA,EACd,eAAgBA,EAChB,SAAUE,EACV,YAAaA,EACb,cAAeF,EACf,cAAeA,EACf,aAAcG,EACd,eAAgBF,EAChB,aAAcE,EACd,eAAgBF,EAChB,WAAYA,CAChB,CAAC,CACL,CACJ,CACJ,EArCaG,EAANN,EAAMM,EACF,QAAU,sBCzBpB,IAAAC,EAA4B,SAwBPC,EAAf,KAA4B,CAUnC,EAVsBA,EACF,WAAa,KADXA,EAEF,aAAe,OAFbA,EAGF,gBAAkB,sBAHhBA,EAIF,iBAAmB,yBAJjBA,EAKF,iBAAmB,yBALjBA,EAMF,eAAiB,yBANfA,EAOF,iBAAmB,yBAPjBA,EASF,UAAS,eAA0B,EC/BvD,IAAAC,EAA+C,SAE9BC,OACAA,EAAA,QAAU,sBAgBvB,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAkBC,GAAK,SAAUC,EAAGC,EAAGC,EAAG,CAC5C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJhB,IAAAK,EAAyC,SAInC,IAAMC,EAAN,cAA8B,cAAgC,CAA9D,kCAUH,KAAU,KAAO,IAAIC,EAAc,KAAK,QAAQ,EATtC,YAAa,CAAE,OAAOA,EAAc,OAAS,CAC7C,eAAgB,CAAE,OAAOC,EAAa,UAAY,CAClD,oBAAqB,CAAE,OAAOA,EAAa,eAAiB,CAC5D,iBAAkB,CAAE,OAAOA,EAAa,YAAc,CACtD,YAAa,CAAE,OAAOC,EAAiB,OAAS,CAChD,qBAAsB,CAAE,OAAOD,EAAa,gBAAkB,CAC9D,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAC9D,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAI5E,EAZaF,EAANI,EAAA,CADN,aAAW,cAAc,GACbJ,GLCN,IAAMK,EAAN,cAA4B,YAA8B,CACnD,eAAgB,CAAE,OAAOC,EAAiB,UAAY,CACtD,eAAgB,CAAE,OAAOC,CAAiB,CAC1C,eAAgB,CAAE,OAAOC,EAAa,UAAY,CAClD,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAC9D,oBAAqB,CAAE,OAAOA,EAAa,eAAiB,CAC5D,YAAa,CAAE,OAAOC,EAAiB,OAAS,CAE1D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CACJ,EAXaL,EAANM,EAAA,CADN,aAAW,cAAc,GACbN,GDFb,EAAE,UAAW,IACT,0BAAuB,IAAIO,EAAc,EAAE,UAAU,CAAC,EAAE,OAAO,CACnE,CAAC",
  "names": ["import_q", "import_corelib", "SheetTypeColumns", "import_corelib", "import_q", "_SheetTypeForm", "prefix", "w0", "w1", "w2", "w3", "SheetTypeForm", "import_q", "SheetTypeRow", "import_q", "SheetTypeService", "x", "r", "s", "o", "import_corelib", "SheetTypeDialog", "SheetTypeForm", "SheetTypeRow", "SheetTypeService", "__decorateClass", "SheetTypeGrid", "SheetTypeColumns", "SheetTypeDialog", "SheetTypeRow", "SheetTypeService", "container", "__decorateClass", "SheetTypeGrid"]
}
